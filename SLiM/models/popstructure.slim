// usage: 
// slim -s <SEED> -d simu=<sim number> -d MU=<MU RATE> -d R=<R RATE> \
//      -d N=<POPSIZE> -d L=<CHR LENGTH> -d Ns=<NS> -d n=<SAMPLE SIZE> \
//      -d intronL=<INTRON LENGTH> -d exonL=<EXON LENGTH> \
//      -d o=<OUTPUT DIR>  models/popstructure.slim

// set up a simple neutral simulation
initialize() {
	
	// UPLOAD FUNCTIONS - THIS DOES NOT CHANGE
	source("/Users/tur92196/WorkDir/prfratio/slim/src/slim_fun.eidos");
	
	// FOR DEBUGGING ONLY
   //defineGlobal("seed", 123456);
	//defineGlobal("simu", 1);
	//defineGlobal("MU", (1e-6/4));
	//defineGlobal("R", (1e-6/4));
	//defineGlobal("N", 1000);
	//defineGlobal("L", 10000);
	//defineGlobal("Ns", -0.02);
	defineGlobal("intronL", 810); // at this point, it doesn't matter the size 
	defineGlobal("exonL", 324);
	//defineGlobal("n", 40);
   //defineGlobal("outDir", "/Users/tur92196/WorkDir/prfratio/SLiM/results/prfratio/popstructure/fixed/-0.02"); // change this to a working dir when testing ouput
	//defineGlobal("outDir", "results/prfratio/popstructure/fixed/-0.02"); // change this to a working dir when testing ouput	
	
	// FOR DEBUGGING
	// Track pedigree
   //initializeSLiMOptions(keepPedigrees=T);
	
	// Arguments are parsed from command line
	//setSeed(seed);
	defineGlobal("basename", paste0(simu + "_" + getSeed())); // This is for the simplified output file naming
	initializeMutationRate(MU);
	initializeMutationType("m1", 0.5, "f", 0.0);     // neutral mutations in introns
	initializeMutationType("m2", 0.5, "f", Ns/N);    // non-neutral mutations in exons; Ns/N to get s from Ns
	m1.convertToSubstitution = F;
	m2.convertToSubstitution = F;
	
	initializeGenomicElementType("g1", m1, 1);
	initializeGenomicElementType("g2", m2, 1);
	
	//	Generates intron/exons pairs programatically
	base=0;
	while (base < L) {    
	    
       if ((L-1) - base < (intronL + exonL)){
           
           // Make one intron to fill the remaning gap  
		     initializeGenomicElement(g1, base, (base + ((L-1) - base)));
       
       }	else {
           // Make one intron & exon pair   
		     initializeGenomicElement(g1, base, (base + intronL - 1));
		 
		     //exon_length = exonL;
		     initializeGenomicElement(g2, (base + intronL), (base + intronL + exonL - 1));
       
       }    
	    
	    // Update base length
       base = base + intronL + exonL;	
	}// end of while
	
	
	// single recombination rate	
	initializeRecombinationRate(R);

}

// Create a population of size N individuals
1 late() {
	sim.addSubpop("p0", N);
	
	// DEBUGGING ONLY
	//p0.setValue("previous_N", p0.individualCount);
	//
	// Create a log file to track changes in population size for debugging only
   //log = community.createLogFile(paste0(outDir + "/" + basename + "_Ne_log.csv"), logInterval=1);
	//log.addCycle();
	//log.addCustomColumn("N(t-1)", "p0.getValue('previous_N');");
	//log.addCustomColumn("N(t)", "p0.individualCount;");
	//log.addCustomColumn("Ne_heterozygosity", "estimateNe_Heterozygosity(p0, MU);");
	//log.addCustomColumn("Ne_inbreeding", "estimateNe_Inbreeding(p0);");
	//log.addCustomColumn("Ne_inbreeding2", "trackSel_NeInbreeding(p0);");
	
	// schedule SAMPLING BLOCK
	//community.rescheduleScriptBlock(s0, start=10*N+1, end=10*N+1);
	//community.rescheduleScriptBlock(s1, start=10*N+N, end=10*N+N);

}

// POPULATION SPLIT BLOCK
//s0 999999 early(){
10000 early(){
    
    // Population split at times 10N - same N for 5*N generations before sampling
    sim.addSubpopSplit("p1", N, p0);
}

// DEBUGGING STRUCTURE BLOCK
//10001:15000 early(){
//    fst = calcFST(p0.genomes, p1.genomes);
//    print(fst);
//}

// POPULATION MERGE BLOCKS
15000 early(){
    
    // set up p3 to generate itself entirely from migrants
    sim.addSubpop("p2", N);
    p2.setMigrationRates(c(p0,p1), c(0.5, 0.5));
}

15000 late(){

    // remove the source subpopulations
	 p2.setMigrationRates(c(p0, p1), c(0.0, 0.0));
	 p0.setSubpopulationSize(0);
	 p1.setSubpopulationSize(0);
}

// SAMPLING BLOCK
//s1 999999 late(){
15001 late(){
   
    // Take a random sample of individuals from the combined population	
	 m1fsfs = fsfs(p2, m1, n, F);
	 m2fsfs = fsfs(p2, m2, n, F);
	 print(m1fsfs);
	 print("\n");
	 print(m2fsfs);
	 print("\n");
	 print(Ns);
	 
	 // Save FSFSs to a file:
	 writeSFS(m1fsfs, paste0("sfs_neutral_" + basename), outDir);
	 writeSFS(m2fsfs, paste0("sfs_selected_" + basename), outDir);
	
    /////REMOVE?    
    //m1pooledsfs = twoPopPooledfsfs(p0, p1, m1, ngenes1, ngenes2, F);
	 //m2pooledsfs = twoPopPooledfsfs(p0, p1, m2, ngenes1, ngenes2, F);
	
	 //print(m1pooledsfs);
	 //print("\n");
	 //print(m2pooledsfs);
	
	 // Save FSFSs to a file:
	 //writeSFS(m1pooledsfs, paste0("sfs_neutral_" + basename), outDir);
	 //writeSFS(m2pooledsfs, paste0("sfs_selected_" + basename), outDir); 
	
	 sim.simulationFinished();
}

//REMOVE?
//function (*)twoPopPooledfsfs(o<Subpopulation>$ subpop1, o<Subpopulation>$ subpop2, o<MutationType>$ mutType, i$ ngenesFromPop1, i$ ngenesFromPop2, [logical$ outInvariants = F])
//{
//	// randomly sample genomes from each population
//	// Generate a random binomial number for the number of genomes 
//   // to be sampled for population 1; take the difference for population 2
//   
//   sg1 = sample(subpop1.genomes, size = ngenesFromPop1, replace = F);
//   sg2 = sample(subpop2.genomes, size = ngenesFromPop2, replace = F);
//
//   muts = sim.mutationsOfType(mutType);
//   vdac = sg1.mutationCountsInGenomes(muts) + sg2.mutationCountsInGenomes(muts);   
//   
//   Chr = ngenesFromPop1 + ngenesFromPop2;   
//   sampleSize = asInteger(Chr/2);
//   
//	// Calculate the FSFS
//	fsfs = rep(0, sampleSize+1);
//	for (i in seqAlong(vdac))
//	{
//	    // get the derived and ancestral allele counts
//       dac = vdac[i];	
//       aac = Chr - dac;	
//	
//	    // set the minimum for the folded-sfs
//	    mac = min(c(aac, dac));
//	
//	    // fill the vector with the counts for each bin
//	    fsfs[mac] = fsfs[mac] + 1;
//	}//end of for loop
//	
//	// if output invariants, return the full folded-sfs, 
//	// if not, remove the invariant bin
//	if (outInvariants)
//	   return fsfs;
//	else
//	   return fsfs[1:(size(fsfs)-1)];
//}