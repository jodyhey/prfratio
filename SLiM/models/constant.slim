// usage: 
// slim -s <SEED> -d simu=<sim number> -d MU=<MU RATE> -d R=<R RATE> -d N=<POPSIZE> \
//      -d L=<CHR LENGTH> -d Ns=<NS>
//      -d intronL=<INTRON LENGTH> -d exonL=<EXON LENGTH> \
//      -d n=<SAMPLE SIZE> -d basename=<NAME> -d o=<OUTPUT DIR>  

// set up a simple neutral simulation
initialize() {
	
	// UPLOAD FUNCTIONS - THIS DOES NOT CHANGE
	source("/Users/tur92196/WorkDir/prfratio/SLiM/src/slim_fun.eidos");
	
	// FOR DEBUGGING ONLY
	//defineGlobal("seed", 123456);
	//defineGlobal("simu", 1);
	//defineGlobal("MU", (1e-6/4));
	//defineGlobal("R", (1e-6/4));
	//defineGlobal("N", 1000);
	//defineGlobal("L", 10000);
	//defineGlobal("Ns", -0.02);
	//defineGlobal("dist", "fixed")
	//defineGlobal("distpars", "10.0-1.0")
	defineGlobal("intronL", 810); // at this point, it doesn't matter the size 
	defineGlobal("exonL", 324);
	//defineGlobal("n", 40);
	//defineGlobal("outDir", "/Users/tur92196/WorkDir/prfratio/SLiM/results/prfratio/constant/-0.02"); // change this to a working dir when testing ouput
	//defineGlobal("outDir", "results/prfratio/constant/-0.02"); // change this to a working dir when testing ouput	
	//defineGlobal("model", "constant");
	
	// FOR DEBUGGING
	// Track pedigree
	//initializeSLiMOptions(keepPedigrees=T);
	
	// Arguments are parsed from command line
	//setSeed(seed);
	initializeMutationRate(MU);
	initializeMutationType("m1", 0.5, "f", 0.0);     // neutral mutations in introns
	initializeMutationType("m2", 0.5, "f", Ns/N);    // non-neutral mutations in exons; Ns/N to get s from Ns
	m1.convertToSubstitution = F;
	m2.convertToSubstitution = F;
	
	initializeGenomicElementType("g1", m1, 1);
	initializeGenomicElementType("g2", m2, 1);
	
	//	Generates intron/exons pairs programatically
	base=0;
	while (base < L) {
		
		if ((L-1) - base < (intronL + exonL)){
			
			// Make one intron to fill the remaning gap  
			initializeGenomicElement(g1, base, (base + ((L-1) - base)));
		
		}	else {
			// Make one intron & exon pair   
			initializeGenomicElement(g1, base, (base + intronL - 1));
			
			//exon_length = exonL;
			initializeGenomicElement(g2, (base + intronL), (base + intronL + exonL - 1));
		
		}
		
		// Update base length
		base = base + intronL + exonL;
	}// end of while
	
	
	// single recombination rate	
	initializeRecombinationRate(R);

}

// Create a population of size N individuals
1 late() {
	sim.addSubpop("p0", N);
	
	// DEBUGGING ONLY
	//p0.setValue("previous_N", p0.individualCount);
	//
	// Create a log file to track changes in population size for debugging only
	//log = community.createLogFile(paste0(outDir + "/" + model + "_" + Ns + "_" + simu + "_Ne_log.csv"), logInterval=1);
	//log.addCycle();
	//log.addCustomColumn("N(t-1)", "p0.getValue('previous_N');");
	//log.addCustomColumn("N(t)", "p0.individualCount;");
	//log.addCustomColumn("Ne_heterozygosity", "estimateNe_Heterozygosity(p0, MU);");
	//log.addCustomColumn("Ne_inbreeding", "estimateNe_Inbreeding(p0);");
	//log.addCustomColumn("Ne_inbreeding2", "trackSel_NeInbreeding(p0);");
	
	// schedule SAMPLING BLOCK
	community.rescheduleScriptBlock(s0, start=10*N, end=10*N);

}

// SAMPLING BLOCK
s0 999999 late(){
	m1fsfs = fsfs(p0, m1, n, F);
	m2fsfs = fsfs(p0, m2, n, F);
	print(m1fsfs);
	print("\n");
	print(m2fsfs);
	print("\n");
	print(Ns);
	
	// Save FSFSs to a file:
	if (dist != "fixed") {
		writeSFS(m1fsfs, paste0(model + "_" + dist + "_" + distpars + "_" + simu + "_sfs_neutral"), outDir);
		writeSFS(m2fsfs, paste0(model + "_" + dist + "_" + distpars + "_" + simu + "_sfs_selected"), outDir);
	
	} else {
		writeSFS(m1fsfs, paste0(model + "_" + dist + "_" + Ns + "_" + simu + "_sfs_neutral"), outDir);
		writeSFS(m2fsfs, paste0(model + "_" + dist + "_" + Ns + "_" + simu + "_sfs_selected"), outDir);
	}
	
	sim.simulationFinished();
}


